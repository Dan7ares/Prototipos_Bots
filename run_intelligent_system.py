#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Sistema de Trading Inteligente con Evaluaci√≥n de Oportunidades
-------------------------------------------------------------
Este script ejecuta el bot de trading con el nuevo sistema que opera
basado en oportunidades de mercado en lugar de restricciones temporales.

Caracter√≠sticas principales:
- An√°lisis t√©cnico en tiempo real
- Evaluaci√≥n de condiciones de mercado
- An√°lisis de riesgo/recompensa
- Eliminaci√≥n de restricciones temporales fijas
- Gesti√≥n inteligente de capital

Autor: Trading Bot Team
Versi√≥n: 2.0
"""

import sys
import os
import time
import json
from datetime import datetime

# Agregar el directorio actual al path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from core.trading_bot import ScalpingBot
from core.risk_manager import IntelligentRiskManager
from config.settings import SCALPING_CONFIG

def display_system_info():
    """Muestra informaci√≥n del sistema inteligente de oportunidades"""
    print("ü§ñ SISTEMA DE TRADING INTELIGENTE CON OPORTUNIDADES")
    print("=" * 60)
    print("üéØ CARACTER√çSTICAS PRINCIPALES:")
    print("   ‚úÖ An√°lisis t√©cnico en tiempo real (EMA, RSI, Bollinger)")
    print("   ‚úÖ Evaluaci√≥n de condiciones de mercado (volatilidad, spread)")
    print("   ‚úÖ An√°lisis de riesgo/recompensa din√°mico")
    print("   ‚úÖ Eliminaci√≥n de restricciones temporales fijas")
    print("   ‚úÖ Gesti√≥n inteligente de capital (2% riesgo por operaci√≥n)")
    print("   ‚úÖ Stop loss y take profit adaptativos")
    print("   ‚úÖ Monitoreo continuo de posiciones")
    print("   ‚úÖ Escalado parcial de posiciones")
    print("   ‚úÖ Sistema de alertas inteligentes")
    print()
    print("üîç CRITERIOS DE OPORTUNIDAD:")
    print("   ‚Ä¢ Fuerza de se√±al t√©cnica > 0.6")
    print("   ‚Ä¢ Condiciones de mercado favorables")
    print("   ‚Ä¢ Ratio riesgo/recompensa > 1.5:1")
    print("   ‚Ä¢ Confianza general > 60%")
    print()
    print("‚ö° VENTAJAS DEL NUEVO SISTEMA:")
    print("   ‚Ä¢ Opera solo en las mejores oportunidades")
    print("   ‚Ä¢ Maximiza la eficiencia del capital")
    print("   ‚Ä¢ Reduce operaciones innecesarias")
    print("   ‚Ä¢ Mejora la precisi√≥n de entrada")
    print("   ‚Ä¢ Adapta estrategia a condiciones de mercado")
    print("=" * 60)
    print()

def run_opportunity_system():
    """Ejecuta el sistema de trading basado en oportunidades"""
    
    display_system_info()
    
    print("üöÄ INICIANDO SISTEMA DE OPORTUNIDADES INTELIGENTE")
    print("-" * 50)
    
    try:
        from config.settings import SCALPING_CONFIG, STRATEGY_CONFIG
        bot = ScalpingBot({
            'scalping': SCALPING_CONFIG.copy(),
            'strategy': STRATEGY_CONFIG.copy()
        })

        # Inicializar antes de mostrar resumen
        bot.initialize()

        print("‚úÖ Bot inicializado correctamente")
        print("‚úÖ Sistema de oportunidades activado")
        print("‚úÖ Gesti√≥n inteligente de capital habilitada")
        print()
        
        # Mostrar configuraci√≥n inicial
        risk_manager = bot.risk_manager
        
        print("üí∞ CONFIGURACI√ìN DE CAPITAL:")
        summary = risk_manager.get_risk_summary(bot.account_balance)
        print(f"   Capital efectivo: ${summary.get('effective_capital', 50.0):.2f}")
        print(f"   Riesgo m√°ximo por operaci√≥n: ${summary.get('max_risk_per_trade', 1.0):.2f}")
        print(f"   L√≠mite de drawdown diario: {summary.get('daily_drawdown_pct', 0.0)*100:.2f}%")
        print(f"   Operaciones restantes hoy: {summary.get('remaining_daily_trades', 30)}")
        print()
        
        print("üéØ UMBRALES DE OPORTUNIDAD:")
        print("   Confianza m√≠nima: 60%")
        print("   Puntuaci√≥n t√©cnica m√≠nima: 0.6")
        print("   Ratio R:R m√≠nimo: 1.5:1")
        print()
        
        print("üîÑ INICIANDO EVALUACI√ìN CONTINUA DE OPORTUNIDADES...")
        print("   (El bot evaluar√° el mercado y operar√° solo en las mejores oportunidades)")
        print("   (Presiona Ctrl+C para detener)")
        print("-" * 50)
        
        # Ejecutar el bot
        bot.run()
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Sistema detenido por el usuario")
        print("üìä Generando resumen final...")
        
        if 'bot' in locals():
            # Mostrar resumen final
            summary = bot.risk_manager.get_risk_summary(bot.account_balance)
            print("\nüìà RESUMEN FINAL DEL SISTEMA:")
            print(f"   Operaciones ejecutadas: {summary.get('trades_today', 0)}")
            print(f"   P&L diario: ${summary.get('daily_pnl', 0.0):.2f}")
            print(f"   Drawdown diario: {summary.get('daily_drawdown_pct', 0.0)*100:.2f}%")
            print(f"   Alertas de riesgo hoy: {summary.get('risk_alerts_today', 0)}")
        
        print("‚úÖ Sistema finalizado correctamente")
        
    except Exception as e:
        print(f"‚ùå Error en el sistema: {e}")
        print("üîß Revisa la configuraci√≥n y conexiones")
        return False
    
    return True

def main():
    """Funci√≥n principal"""
    
    print("üéØ SISTEMA DE TRADING CON OPORTUNIDADES INTELIGENTES")
    print("=" * 60)
    print()
    
    while True:
        print("Selecciona una opci√≥n:")
        print("1. üß™ Ejecutar pruebas del sistema")
        print("2. üöÄ Iniciar trading con oportunidades inteligentes")
        print("3. üìä Ver configuraci√≥n del sistema")
        print("4. ‚ùå Salir")
        print()
        
        choice = input("Ingresa tu opci√≥n (1-4): ").strip()
        
        if choice == "1":
            print("\nüß™ EJECUTANDO PRUEBAS DEL SISTEMA...")
            print("-" * 40)
            
            # Importar y ejecutar pruebas
            try:
                from test_intelligent_capital import test_market_opportunity_system
                test_market_opportunity_system()
                
                print("\n‚úÖ Pruebas completadas exitosamente")
                input("\nPresiona Enter para continuar...")
                
            except Exception as e:
                print(f"‚ùå Error en las pruebas: {e}")
                input("\nPresiona Enter para continuar...")
        
        elif choice == "2":
            print("\nüöÄ INICIANDO SISTEMA DE TRADING...")
            print("-" * 40)
            
            confirm = input("¬øConfirmas iniciar el trading en vivo? (s/N): ").strip().lower()
            if confirm in ['s', 'si', 's√≠', 'y', 'yes']:
                run_opportunity_system()
            else:
                print("‚ùå Operaci√≥n cancelada")
            
            input("\nPresiona Enter para continuar...")
        
        elif choice == "3":
            print("\nüìä CONFIGURACI√ìN DEL SISTEMA:")
            print("-" * 40)
            display_system_info()
            
            # Mostrar configuraci√≥n t√©cnica
            print("‚öôÔ∏è CONFIGURACI√ìN T√âCNICA:")
            print(f"   S√≠mbolo: {SCALPING_CONFIG.get('symbol', 'EURUSD')}")
            print(f"   Timeframe: {SCALPING_CONFIG.get('timeframe', '1m')}")
            print(f"   Lotes base: {SCALPING_CONFIG.get('base_lot_size', 0.01)}")
            print(f"   Spread m√°ximo: {SCALPING_CONFIG.get('max_spread', 3.0)} pips")
            print()
            
            input("Presiona Enter para continuar...")
        
        elif choice == "4":
            print("\nüëã ¬°Hasta luego!")
            break
        
        else:
            print("\n‚ùå Opci√≥n inv√°lida. Intenta de nuevo.")
            input("Presiona Enter para continuar...")
        
        print("\n" + "="*60 + "\n")

if __name__ == "__main__":
    main()